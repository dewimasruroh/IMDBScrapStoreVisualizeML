import pandas as pd
import selenium.webdriver.chrome.webdriver
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import random
import numpy as np
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
import re

# Set up the WebDriver
options = Options()
options.add_experimental_option("detach", True)
driver = webdriver.Chrome(options=options)
driver.get("https://www.imdb.com/chart/top/")

# Collect data
ratings = [elem.text for elem in driver.find_elements(By.CLASS_NAME, 'ipc-rating-star--rating')]
rating_by = [elem.text for elem in driver.find_elements(By.CLASS_NAME, 'ipc-rating-star--voteCount')]

years = []
hours = []

for i in range(1, 251):
    # Extract Year
    year_xpath = f'//*[@id="__next"]/main/div/div[3]/section/div/div[2]/div/ul/li[{i}]/div[2]/div/div/div[2]/span[1]'
    year_elements = driver.find_elements(By.XPATH, year_xpath)
    years.extend([elem.text for elem in year_elements])

    # Extract Hours
    hours_xpath = f'//*[@id="__next"]/main/div/div[3]/section/div/div[2]/div/ul/li[{i}]/div[2]/div/div/div[2]/span[2]'
    hours_elements = driver.find_elements(By.XPATH, hours_xpath)
    hours.extend([elem.text for elem in hours_elements])

# Ensure all lists have the same length
min_length = min(len(ratings), len(rating_by), len(years), len(hours))
data = {
    'Rating': ratings[:min_length],
    'RatingBy': rating_by[:min_length],
    'Year': years[:min_length],
    'Hours': hours[:min_length]
}

# Create a DataFrame and save to Excel
df_desc = pd.DataFrame(data)

# Using inspect by class, it returns also the title of the page, which I don't want it, I want it to start from the movie title only. so excluding this first from the process, and call it later.
titles = [elem.text for elem in driver.find_elements(By.CLASS_NAME, 'ipc-title__text')[2:252]]
df_title = pd.DataFrame(titles).rename(columns={0: 'Title'})
df = pd.merge(df_title, df_desc, left_index=True, right_index=True, how='left')

# Remove leading indices from 'Title'
df['Title'] = df['Title'].str.replace(r'^\d+\.\s*', '', regex=True)

# Turn the Value to numeric so easier to count later
def convert_value(value):
    """
    Convert string values with 'M' (millions) or 'K' (thousands) to integers.
    """
    value = value.strip().strip('()')
    if 'M' in value:
        return int(float(value.replace('M', '')) * 1_000_000)
    elif 'K' in value:
        return int(float(value.replace('K', '')) * 1_000)
    else:
        return int(value)

# Apply conversion to 'RatingBy' and cast to integer
df['RatingBy'] = df['RatingBy'].apply(convert_value).astype(int)

# Convert 'Rating' and 'Year' to float
df['Rating'] = df['Rating'].astype(float)
df['Year'] = df['Year'].astype(int)

def convert_to_minutes(duration):
    """
    Convert a duration string to total minutes.
    """
    hours = re.search(r'(\d+)h', duration)
    minutes = re.search(r'(\d+)m', duration)
    
    hours = int(hours.group(1)) if hours else 0
    minutes = int(minutes.group(1)) if minutes else 0
    
    return hours * 60 + minutes

# Apply duration conversion to 'Hours' column
df['Minutes'] = df['Hours'].apply(convert_to_minutes)

df = df.drop(columns=['Hours'])
df
